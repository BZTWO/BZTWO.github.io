{"meta":{"title":"BZTWO","subtitle":"","description":"","author":"an","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2023-11-09T01:09:00.000Z","updated":"2023-11-09T01:09:00.045Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"archives","date":"2023-11-09T01:08:45.000Z","updated":"2023-11-09T01:08:45.177Z","comments":true,"path":"archives/index.html","permalink":"http://example.com/archives/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2023-11-09T01:09:18.000Z","updated":"2023-11-09T01:16:22.700Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"C++for_each.md","slug":"for-each-md","date":"2023-11-08T15:00:49.000Z","updated":"2023-11-09T04:31:42.564Z","comments":true,"path":"2023/11/08/for-each-md/","link":"","permalink":"http://example.com/2023/11/08/for-each-md/","excerpt":"","text":"头文件：algorithm 定义​ for_each()函数是C++标准库中的一种算法，用于对指定范围内的元素进行操作。它接受两个参数：第一个参数是要操作的容器的起始迭代器，第二个参数是要操作结束的迭代器。for_each()函数将依次遍历指定范围内的每个元素，并对每个元素执行指定的操作。 引入​ 当我们不使用for_each()时 1234567891011121314#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123; int a[] = &#123; 1, 2, 3, 4&#125;; vector&lt;int&gt; v(a, a+sizeof(a)/sizeof(int)); for(vector&lt;int&gt;::iterator itor = v.begin();itor!=v.end();++itor) &#123; cout&lt;&lt;*itor&lt;&lt;endl; &#125;&#125; 需了解​ bind1st或bind2nd函数：bind1st 和 bind2nd 是 C++ 标准库中的两个函数对象适配器，用于将二元函数对象（也就是接受两个参数的函数）转换成一元函数对象（也就是只接受一个参数的函数）。这两个函数的使用方法相似，只是参数位置有所不同。 ​ bind1st 将二元函数对象的第一个参数绑定为指定的值，生成一元函数对象。而 bind2nd 则将二元函数对象的第二个参数绑定为指定的值。 ​ 这两个函数的使用场景包括但不限于 C++ 标准库中的算法，如 std::find_if 或 std::for_each，这样你就可以在算法中使用自定义的二元函数。 bind1st 的示例： 1234567891011121314151617#include &lt;algorithm&gt; #include &lt;vector&gt; #include &lt;functional&gt; int main() &#123; std::vector&lt;int&gt; vec = &#123;1, 2, 3, 4, 5&#125;; // 使用 bind1st 将二元函数 (int, int) -&gt; bool 转为一元函数 (int) -&gt; bool auto is_even = std::bind1st(std::greater&lt;int&gt;(), 0); std::vector&lt;int&gt; even_vec(vec.begin(), vec.end()); std::remove_if(even_vec.begin(), even_vec.end(), is_even); // 输出剩余的偶数 for (auto&amp; i : even_vec) &#123; std::cout &lt;&lt; i &lt;&lt; &quot; &quot;; &#125; &#125; ​ 这个例子中，我们创建了一个新的函数对象 is_even，它接受一个参数并判断该参数是否为偶数。注意，虽然 std::greater&lt;int&gt;() 是一个接受两个参数的函数，但通过 bind1st，我们将其转换为一个接受一个参数的函数。在判断一个数是否为偶数时，我们将0作为第二个参数传递给 std::greater&lt;int&gt;()。如果该数大于0（即不是偶数），则 std::greater&lt;int&gt;() 返回 true，否则返回 false。然后我们使用 std::remove_if 算法删除所有满足 is_even 的元素。 请注意，从 C++11 开始，推荐使用更强大、更灵活的 std::bind 和 lambda 表达式替代 bind1st 和 bind2nd，因为这两个函数功能有限，而且可能在某些情况下产生混淆和错误。 ​ ptr_fun是一个将普通函数适配成仿函数的配接器（adapter）。它可以将一般函数当作仿函数使用，使得能够将一般函数当做仿函数传给STL算法。 12345678910template&lt;class _Arg1, class _Arg2, class _Result&gt; inline pointer_to_binary_function&lt;_Arg1, _Arg2, _Result, _Result(__clrcall *)(_Arg1, _Arg2)&gt; ptr_fun(_Result (__clrcall *_Left)(_Arg1, _Arg2)) &#123; // return pointer_to_binary_function functor adapter return (pointer_to_binary_function&lt;_Arg1, _Arg2, _Result, _Result (__clrcall *)(_Arg1, _Arg2)&gt;(_Left)); &#125; ​ ptr_fun将普通函数(两个参数, 如果有多个参数, 要改用boost::bind)适配成bind1st或bind2nd能够使用的functor，否则对bind1st或bind2nd直接绑定普通函数。 123456789101112131415161718192021222324#include &lt;algorithm&gt; #include &lt;functional&gt; #include &lt;iostream&gt; using namespace std; int sum(int arg1, int arg2) &#123; std::cout&lt;&lt; &quot;arg1 = &quot; &lt;&lt; arg1 &lt;&lt; std::endl; std::cout&lt;&lt; &quot;arg2 = &quot; &lt;&lt; arg2 &lt;&lt; std::endl; int sum = arg1 + arg2; std::cout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; std::endl; return sum; &#125; int main(int argc, char *argv[], char *env[]) &#123; bind1st(ptr_fun(sum), 1)(2); // the same as sum(1,2) bind2nd(ptr_fun(sum), 1)(2); // the same as sum(2,1) return 0; &#125; for_each() 12345template&lt;typename InputIterator, typename Function&gt;Function for_each(InputIterator beg, InputIterator end, Function f) &#123; while(beg != end) f(*beg++);&#125; ​ for_each()只能配合global function和function object。","categories":[],"tags":[{"name":"学习使用记录函数C++","slug":"学习使用记录函数C","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E5%87%BD%E6%95%B0C/"}]},{"title":"hexo","slug":"hello-world","date":"2023-10-31T05:17:29.376Z","updated":"2023-10-31T13:15:13.619Z","comments":true,"path":"2023/10/31/hello-world/","link":"","permalink":"http://example.com/2023/10/31/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"学习使用记录函数C++","slug":"学习使用记录函数C","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E5%87%BD%E6%95%B0C/"}]}